use crate::protocol::traits::{Identify, ReadMCTypesExt};
use crate::types::SerdeError;

pub enum Packet {
    AcceptTeleportation,
    BlockEntityTagQuery,
    ChangeDifficulty,
    Chat,
    ChatAck,
    ChatCommand,
    ChatCommandSigned,
    ChatSessionUpdate,
    ChunkBatchReceived,
    ClientCommand,
    ClientInformation,
    CommandSuggestion,
    ConfigurationAcknowledged,
    ContainerButtonClick,
    ContainerClick,
    ContainerClose,
    ContainerSlotStateChanged,
    CookieResponse,
    CustomPayload,
    DebugSampleSubscription,
    EditBook,
    EntityTagQuery,
    Interact,
    JigsawGenerate,
    KeepAlive,
    LockDifficulty,
    MovePlayerPos,
    MovePlayerPosRot,
    MovePlayerRot,
    MovePlayerStatusOnly,
    MoveVehicle,
    PaddleBoat,
    PickItem,
    PingRequest,
    PlaceRecipe,
    PlayerAbilities,
    PlayerAction,
    PlayerCommand,
    PlayerInput,
    Pong,
    RecipeBookChangeSettings,
    RecipeBookSeenRecipe,
    RenameItem,
    ResourcePack,
    SeenAdvancements,
    SelectTrade,
    SetBeacon,
    SetCarriedItem,
    SetCommandBlock,
    SetCommandMinecart,
    SetCreativeModeSlot,
    SetJigsawBlock,
    SetStructureBlock,
    SignUpdate,
    Swing,
    TeleportToEntity,
    UseItem,
    UseItemOn,
    Unknown,
}

impl Identify for Packet {
    fn get_id(id: u8) -> Self {
        match id {
            0 => Packet::AcceptTeleportation,
            1 => Packet::BlockEntityTagQuery,
            2 => Packet::ChangeDifficulty,
            6 => Packet::Chat,
            3 => Packet::ChatAck,
            4 => Packet::ChatCommand,
            5 => Packet::ChatCommandSigned,
            7 => Packet::ChatSessionUpdate,
            8 => Packet::ChunkBatchReceived,
            9 => Packet::ClientCommand,
            10 => Packet::ClientInformation,
            11 => Packet::CommandSuggestion,
            12 => Packet::ConfigurationAcknowledged,
            13 => Packet::ContainerButtonClick,
            14 => Packet::ContainerClick,
            15 => Packet::ContainerClose,
            16 => Packet::ContainerSlotStateChanged,
            17 => Packet::CookieResponse,
            18 => Packet::CustomPayload,
            19 => Packet::DebugSampleSubscription,
            20 => Packet::EditBook,
            21 => Packet::EntityTagQuery,
            22 => Packet::Interact,
            23 => Packet::JigsawGenerate,
            24 => Packet::KeepAlive,
            25 => Packet::LockDifficulty,
            26 => Packet::MovePlayerPos,
            27 => Packet::MovePlayerPosRot,
            28 => Packet::MovePlayerRot,
            29 => Packet::MovePlayerStatusOnly,
            30 => Packet::MoveVehicle,
            31 => Packet::PaddleBoat,
            32 => Packet::PickItem,
            33 => Packet::PingRequest,
            34 => Packet::PlaceRecipe,
            35 => Packet::PlayerAbilities,
            36 => Packet::PlayerAction,
            37 => Packet::PlayerCommand,
            38 => Packet::PlayerInput,
            39 => Packet::Pong,
            40 => Packet::RecipeBookChangeSettings,
            41 => Packet::RecipeBookSeenRecipe,
            42 => Packet::RenameItem,
            43 => Packet::ResourcePack,
            44 => Packet::SeenAdvancements,
            45 => Packet::SelectTrade,
            46 => Packet::SetBeacon,
            47 => Packet::SetCarriedItem,
            48 => Packet::SetCommandBlock,
            49 => Packet::SetCommandMinecart,
            50 => Packet::SetCreativeModeSlot,
            51 => Packet::SetJigsawBlock,
            52 => Packet::SetStructureBlock,
            53 => Packet::SignUpdate,
            54 => Packet::Swing,
            55 => Packet::TeleportToEntity,
            57 => Packet::UseItem,
            56 => Packet::UseItemOn,
            _ => Packet::Unknown,
        }
    }

    fn id_and_wrap<R>(reader: &mut R) -> Result<Self, SerdeError>
    where
        R: ReadMCTypesExt,
    {
        todo!()
    }
}
